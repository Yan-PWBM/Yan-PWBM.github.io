[{"content":"Python is a popular programming language and often times we need to import external libraries to help us perform various tasks. However, Python and those external libraries have many different versions, sometimes one python version may not support the libraries that we need, or some of our projects just require a different version of external libraries than another one. When we only have one python installation in our computer and have only that one place to install our packages, we cannot perform all the tasks that have different version requirements for Python or the packages.\nOne way to handle this is to create a virtual environment, where the Python (interpreter), libraries and scripts installed into it can be isolated from those installed in other virtual environments. pyenv can help us install different versions of python and easily switch between them; pyenv-virtualenv is a pyenv plugin that provides features to manage virtualenvs (and conda environments) for Python on UNIX-like systems.\nNote there are other ways to create virtual environments, this is just one way.\nStep 1: Install pyenv and pyenv-virtualenv #\rFor MacOS users, you can install pyenv (and pyenv-virtualenv) with Homebrew. If you do not have Homebrew on your computer yet, run the following command in your terminal to install Homebrew first (check here\rfor more information).\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; After that, install pyenv by running the following commands in your terminal:\nbrew update brew install pyenv install pyenv-virtualenv by running either of the the following 2 commands:\nbrew install pyenv-virtualenv brew install --HEAD pyenv-virtualenv # install the latest development version Step 2: Set up shell environment for Pyenv #\rDepends on your shell type, you need set up the shell environment differently. To check what shell type you have on your computer, open your terminal and it will show up on the top part of the terminal window. The following setup should work for the majority of users for common use cases(see below).\nFor Zsh echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;eval \u0026#34;$(pyenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc For bash: # add the commands to ~/.bashrc echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;eval \u0026#34;$(pyenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc # add the commands to ~/.profile echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.profile echo \u0026#39;command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.profile echo \u0026#39;eval \u0026#34;$(pyenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.profile # add the commands to ~/.bash_profile echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#39;command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#39;eval \u0026#34;$(pyenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile In order to make pyenv-virtualenv work, you need to further add the following:\neval \u0026#34;$(pyenv virtualenv-init -)\u0026#34; After the shell setup steps, remember to restart the shell for the changes to take effect by running\nexec \u0026#34;$SHELL\u0026#34; Step 3: Use pyenv and pyenv-virtualenv #\r1. pyenv usage #\rBefore installing any new python version with pyenv, first install Python build dependencies following the instructions here\runder Suggested build environment session.\nBy simply typing pyenv in the terminal, you will get a preview of some useful pyenv commands there. The following are some common commands.\nInstall/uninstall additional python version\npyenv install \u0026lt;version\u0026gt; # install e.g. pyenv install 3.7.14 pyenv uninstall \u0026lt;version\u0026gt; # uninstall You can check all the available versions by running the following command:\npyenv install --list | grep \u0026#34; 3\\.[67891]\u0026#34; # This will list all the available python versions of 3.6 above Check Python versions installed under pyenv\nthe one with the * in front is the global/default python version. Note that if you have conda installed, the python version under conda environment will not show here.\npyenv versions Switch versions\npyenv shell \u0026lt;version\u0026gt; # select version for current shell session pyenv local \u0026lt;version\u0026gt; # Set default version for the current directory (or its subdirectories) pyenv global \u0026lt;version\u0026gt; # set global version for user account 2. pyenv-virtualenv usage #\rCreate a virtual environment with specific python version\npyenv virtualenv \u0026lt;python_version\u0026gt; \u0026lt;venv_example\u0026gt; # e.g. pyenv virtualenv 3.10.4 venv_test Install packages in the created virual environment\npyenv local \u0026lt;venv_example\u0026gt; # first go to the virtual environment pip install \u0026lt;package\u0026gt; # install packages using pip install Use the virtual environment\nThere are multiple ways to use the virtual environment.\nIf you want to automatically activate the virtual environment for a project folder, you can either\ncreate a .python-version file in the project folder by running the following command in the terminal: echo \u0026lt;venv_example\u0026gt; \u0026gt; \u0026lt;project_folder_path\u0026gt;/.python-version # e.g. echo venv_test \u0026gt; \u0026#39;/Users/yhe210/Desktop/test-env\u0026#39;/.python-version or\ngo to the project from a terminal, and run: pyenv local \u0026lt;venv_example\u0026gt; Then everytime you enter the project folder, the virtual environment will be automatically activated, and your codes under that project folder will automatically run via the virtual environment.\nIf you want to (permanently) change the (default) virtual environment for the project folder, you can achieve that by running:\npyenv local \u0026lt;new_venv\u0026gt; Note that\nif you use the virual environment by creating the .python-version file, you will notice that the .python-version file also changes automatically whenever you change the default virtual environment, it always corresponds to the name of the virtual environment that you set. You need to re-enter the project folder everytime after you run pyenv local \u0026lt;venv\u0026gt; in order to make the new virtual environment take effect. You can always check the (default/permenant) virtual environment for your project folder by opening a terminal under that folder and running:\npyenv local If you are working in VS Code\ryou can activate a virtual environment by pressing control+shift+P and select Python: Select Interpreter, refresh by clicking the refreshing bar on the top right (this should give you all available choices in your computer) and choose the virtual environment that you want, this will not change the default virtual environment. If you want to temporarily switch to a different virtual environment in current terminal, you can open a terminal and run the following command:\npyenv shell \u0026lt;new_venv\u0026gt; Collaborating with others #\rThe best part about working with virtual environments is how easy it becomes to work with others on projects. All you need to do is let them know what python version your using and give them a snapshot of your environment using pip freeze \u0026gt; requriements.txt. Now they are able to recreate your environment on their laptop without changing their global settings.\nIt is good practice to have a base environment as your starting shell and then create a new environment for each project you work on.\nHave fun with your Python virtual environments :)\nSome other useful links:\nhttps://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv\rhttps://github.com/pyenv/pyenv-virtualenv\r","date":"17 October 2022","permalink":"/posts/pyenv/","section":"Blog posts","summary":"Python is a popular programming language and often times we need to import external libraries to help us perform various tasks.","title":"Virtual Environment Management with pyenv"},{"content":"google-site-verification: google02ca83301041d850.html","date":"1 January 0001","permalink":"/google02ca83301041d850/","section":"Welcome to My Homepage! ðŸŽ‰","summary":"google-site-verification: google02ca83301041d850.","title":""}]